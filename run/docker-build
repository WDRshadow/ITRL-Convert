#!/usr/bin/env bash

set -e  # Exit on error

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
DOCKER_DIR="$SCRIPT_DIR"

echo -e "${BLUE}[INFO]${NC} Starting Docker build process..."
echo -e "${BLUE}[INFO]${NC} Project directory: $PROJECT_DIR"
echo -e "${BLUE}[INFO]${NC} Docker directory: $DOCKER_DIR"

# Stage 1: Create builder container and compile
echo -e "${YELLOW}[STAGE 1]${NC} Creating builder container and compiling..."

# Create a temporary builder container
BUILDER_CONTAINER="itrl-convert-builder-$(date +%s)"

echo -e "${BLUE}[INFO]${NC} Creating builder container: $BUILDER_CONTAINER"

$PROJECT_DIR/run/init_v4l2

# Run builder container with proper runtime and compile
docker run --runtime nvidia \
    --name "$BUILDER_CONTAINER" \
    --network=host \
    --volume "$PROJECT_DIR:/ITRL-Convert" \
    --device /dev/video16:/dev/video16 \
    --device /dev/video0:/dev/video0 \
    --privileged \
    ghcr.io/kth-sml/svea:r36.4.tegra-aarch64-cu126-22.04-jazzy \
    bash -c "
        cd /ITRL-Convert && \
        chmod +x run/build && \
        rm -rf build/ && \
        ./run/build
    "

if [ $? -ne 0 ]; then
    echo -e "${RED}[ERROR]${NC} Compilation failed in builder container"
    docker rm -f "$BUILDER_CONTAINER" 2>/dev/null || true
    exit 1
fi

echo -e "${GREEN}[SUCCESS]${NC} Compilation completed successfully"

# Stage 2: Create final runtime image
echo -e "${YELLOW}[STAGE 2]${NC} Creating final runtime image..."

# Create Dockerfile for final stage
cat > "$DOCKER_DIR/Dockerfile.runtime" << 'EOF'
FROM ghcr.io/kth-sml/svea:r36.4.tegra-aarch64-cu126-22.04-jazzy

WORKDIR /ITRL-Convert

COPY run/svea_stream /ITRL-Convert/
COPY run/fisheye_calibration.yaml /ITRL-Convert/
COPY run/homography_calibration.yaml /ITRL-Convert/

RUN chmod +x /ITRL-Convert/svea_stream

ENTRYPOINT ["/ITRL-Convert/svea_stream"]
EOF

echo -e "${BLUE}[INFO]${NC} Building final runtime image..."

# Build the final image using compiled binaries
docker build --network=none -t itrl-convert -f "$DOCKER_DIR/Dockerfile.runtime" "$PROJECT_DIR"

if [ $? -ne 0 ]; then
    echo -e "${RED}[ERROR]${NC} Failed to build final runtime image"
    docker rm -f "$BUILDER_CONTAINER" 2>/dev/null || true
    rm -f "$DOCKER_DIR/Dockerfile.runtime"
    exit 1
fi

# Cleanup
echo -e "${YELLOW}[CLEANUP]${NC} Cleaning up temporary resources..."
docker rm -f "$BUILDER_CONTAINER" 2>/dev/null || true
rm -f "$DOCKER_DIR/Dockerfile.runtime"

echo -e "${GREEN}[SUCCESS]${NC} Docker build completed successfully!"
echo -e "${BLUE}[INFO]${NC} Final image: itrl-convert"
echo -e "${BLUE}[INFO]${NC} Usage example:"
echo -e "${BLUE}[INFO]${NC}   docker run --runtime nvidia -it --rm \\"
echo -e "${BLUE}[INFO]${NC}     --network=host \\"
echo -e "${BLUE}[INFO]${NC}     --device /dev/video16:/dev/video16 \\"
echo -e "${BLUE}[INFO]${NC}     --device /dev/video0:/dev/video0 \\"
echo -e "${BLUE}[INFO]${NC}     --privileged \\"
echo -e "${BLUE}[INFO]${NC}     itrl-convert [arguments]"